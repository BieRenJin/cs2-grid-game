// AI Image Generation for CS2 symbols
export class ImageGenerator {
    constructor() {
        this.apiKey = null; // Will be set from environment or user input
        this.apiUrl = 'https://api.openai.com/v1/images/generations';
        this.cache = new Map(); // Cache generated images
        this.isGenerating = false;
    }
    
    // Set API key
    setApiKey(key) {
        this.apiKey = key;
        localStorage.setItem('openai_api_key', key);
    }
    
    // Get API key from storage or prompt user
    getApiKey() {
        if (this.apiKey) return this.apiKey;
        
        // Try to get from localStorage
        const stored = localStorage.getItem('openai_api_key');\n        if (stored) {\n            this.apiKey = stored;\n            return stored;\n        }\n        \n        // Prompt user for API key\n        const key = prompt('Enter your OpenAI API key to generate CS2-themed images:');\n        if (key) {\n            this.setApiKey(key);\n            return key;\n        }\n        \n        return null;\n    }\n    \n    // Generate image using OpenAI DALL-E\n    async generateImage(prompt, size = '256x256') {\n        const apiKey = this.getApiKey();\n        if (!apiKey) {\n            console.warn('No API key provided, using fallback images');\n            return this.getFallbackImage(prompt);\n        }\n        \n        // Check cache first\n        const cacheKey = `${prompt}_${size}`;\n        if (this.cache.has(cacheKey)) {\n            return this.cache.get(cacheKey);\n        }\n        \n        try {\n            const response = await fetch(this.apiUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${apiKey}`\n                },\n                body: JSON.stringify({\n                    prompt: prompt,\n                    n: 1,\n                    size: size,\n                    response_format: 'url'\n                })\n            });\n            \n            if (!response.ok) {\n                throw new Error(`API request failed: ${response.status}`);\n            }\n            \n            const data = await response.json();\n            const imageUrl = data.data[0].url;\n            \n            // Cache the result\n            this.cache.set(cacheKey, imageUrl);\n            \n            return imageUrl;\n        } catch (error) {\n            console.error('Error generating image:', error);\n            return this.getFallbackImage(prompt);\n        }\n    }\n    \n    // Get fallback SVG or image for when AI generation fails\n    getFallbackImage(prompt) {\n        const fallbacks = {\n            'flashbang': this.createSVG('flashbang'),\n            'smoke': this.createSVG('smoke'),\n            'grenade': this.createSVG('grenade'),\n            'kevlar': this.createSVG('kevlar'),\n            'defuse': this.createSVG('defuse'),\n            'deagle': this.createSVG('deagle'),\n            'ak47': this.createSVG('ak47'),\n            'awp': this.createSVG('awp'),\n            'rush': this.createSVG('rush'),\n            'surge': this.createSVG('surge'),\n            'slash': this.createSVG('slash'),\n            'scatter': this.createSVG('scatter')\n        };\n        \n        const key = Object.keys(fallbacks).find(k => prompt.toLowerCase().includes(k));\n        return fallbacks[key] || fallbacks['flashbang'];\n    }\n    \n    // Create simple SVG icons as fallback\n    createSVG(type) {\n        const svgs = {\n            flashbang: `<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"#FFD700\" stroke=\"#FF6B35\" stroke-width=\"3\"/>\n                <circle cx=\"50\" cy=\"50\" r=\"25\" fill=\"#FFF\" opacity=\"0.8\"/>\n                <text x=\"50\" y=\"60\" text-anchor=\"middle\" font-size=\"20\" fill=\"#000\">FB</text>\n            </svg>`,\n            \n            smoke: `<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"50\" cy=\"60\" r=\"30\" fill=\"#808080\" opacity=\"0.7\"/>\n                <circle cx=\"40\" cy=\"40\" r=\"20\" fill=\"#A0A0A0\" opacity=\"0.6\"/>\n                <circle cx=\"60\" cy=\"45\" r=\"25\" fill=\"#909090\" opacity=\"0.5\"/>\n                <text x=\"50\" y=\"85\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FFF\">SMOKE</text>\n            </svg>`,\n            \n            grenade: `<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <ellipse cx=\"50\" cy=\"60\" rx=\"25\" ry=\"30\" fill=\"#8B4513\"/>\n                <rect x=\"47\" y=\"30\" width=\"6\" height=\"20\" fill=\"#654321\"/>\n                <circle cx=\"50\" cy=\"25\" r=\"5\" fill=\"#FF0000\"/>\n                <text x=\"50\" y=\"90\" text-anchor=\"middle\" font-size=\"10\" fill=\"#FFF\">HE</text>\n            </svg>`,\n            \n            kevlar: `<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M50 20 L30 40 L30 80 L70 80 L70 40 Z\" fill=\"#4169E1\" stroke=\"#1E3A8A\" stroke-width=\"2\"/>\n                <rect x=\"35\" y=\"45\" width=\"30\" height=\"5\" fill=\"#1E3A8A\"/>\n                <rect x=\"35\" y=\"55\" width=\"30\" height=\"5\" fill=\"#1E3A8A\"/>\n                <rect x=\"35\" y=\"65\" width=\"30\" height=\"5\" fill=\"#1E3A8A\"/>\n            </svg>`,\n            \n            defuse: `<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect x=\"30\" y=\"40\" width=\"40\" height=\"20\" fill=\"#32CD32\" rx=\"5\"/>\n                <rect x=\"35\" y=\"30\" width=\"30\" height=\"10\" fill=\"#228B22\"/>\n                <circle cx=\"40\" cy=\"50\" r=\"3\" fill=\"#000\"/>\n                <circle cx=\"60\" cy=\"50\" r=\"3\" fill=\"#000\"/>\n                <rect x=\"45\" y=\"35\" width=\"10\" height=\"3\" fill=\"#FF0000\"/>\n            </svg>`,\n            \n            deagle: `<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect x=\"20\" y=\"45\" width=\"50\" height=\"10\" fill=\"#444\" rx=\"2\"/>\n                <rect x=\"15\" y=\"40\" width=\"20\" height=\"20\" fill=\"#666\" rx=\"3\"/>\n                <rect x=\"60\" y=\"48\" width=\"15\" height=\"4\" fill=\"#222\"/>\n                <circle cx=\"25\" cy=\"50\" r=\"2\" fill=\"#FFD700\"/>\n            </svg>`,\n            \n            ak47: `<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect x=\"10\" y=\"45\" width=\"60\" height=\"8\" fill=\"#8B4513\" rx=\"2\"/>\n                <rect x=\"5\" y=\"40\" width=\"20\" height=\"18\" fill=\"#A0522D\" rx=\"3\"/>\n                <rect x=\"60\" y=\"48\" width=\"20\" height=\"3\" fill=\"#654321\"/>\n                <rect x=\"15\" y=\"35\" width=\"8\" height=\"10\" fill=\"#654321\"/>\n                <text x=\"50\" y=\"70\" text-anchor=\"middle\" font-size=\"10\" fill=\"#FFF\">AK-47</text>\n            </svg>`,\n            \n            awp: `<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect x=\"5\" y=\"47\" width=\"70\" height=\"6\" fill=\"#2F4F2F\" rx=\"1\"/>\n                <rect x=\"2\" y=\"40\" width=\"15\" height=\"20\" fill=\"#556B2F\" rx=\"2\"/>\n                <rect x=\"65\" y=\"49\" width=\"25\" height=\"2\" fill=\"#1C1C1C\"/>\n                <circle cx=\"80\" cy=\"50\" r=\"8\" fill=\"#000\" opacity=\"0.3\"/>\n                <circle cx=\"80\" cy=\"50\" r=\"5\" fill=\"#00FF00\" opacity=\"0.5\"/>\n                <text x=\"50\" y=\"70\" text-anchor=\"middle\" font-size=\"10\" fill=\"#FFF\">AWP</text>\n            </svg>`,\n            \n            rush: `<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <polygon points=\"50,10 60,30 80,30 66,45 72,65 50,55 28,65 34,45 20,30 40,30\" fill=\"#FFD700\" stroke=\"#FF6B35\" stroke-width=\"2\"/>\n                <text x=\"50\" y=\"85\" text-anchor=\"middle\" font-size=\"8\" fill=\"#FFF\">CT</text>\n            </svg>`,\n            \n            surge: `<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"50\" cy=\"50\" r=\"35\" fill=\"url(#rainbow)\"/>\n                <defs>\n                    <radialGradient id=\"rainbow\">\n                        <stop offset=\"0%\" stop-color=\"#FF0000\"/>\n                        <stop offset=\"16%\" stop-color=\"#FF8000\"/>\n                        <stop offset=\"33%\" stop-color=\"#FFFF00\"/>\n                        <stop offset=\"50%\" stop-color=\"#00FF00\"/>\n                        <stop offset=\"66%\" stop-color=\"#0000FF\"/>\n                        <stop offset=\"83%\" stop-color=\"#8000FF\"/>\n                        <stop offset=\"100%\" stop-color=\"#FF0080\"/>\n                    </radialGradient>\n                </defs>\n            </svg>`,\n            \n            slash: `<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M20 80 Q30 50 80 20\" stroke=\"#8A2BE2\" stroke-width=\"8\" fill=\"none\" stroke-linecap=\"round\"/>\n                <path d=\"M15 75 L25 85 L30 80 L20 70 Z\" fill=\"#4B0082\"/>\n                <path d=\"M75 15 L85 25 L80 30 L70 20 Z\" fill=\"#4B0082\"/>\n            </svg>`,\n            \n            scatter: `<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"50\" cy=\"50\" r=\"30\" fill=\"#FF0000\" opacity=\"0.8\"/>\n                <circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"#FF4500\" opacity=\"0.6\"/>\n                <circle cx=\"50\" cy=\"50\" r=\"10\" fill=\"#FFD700\" opacity=\"0.8\"/>\n                <text x=\"50\" y=\"85\" text-anchor=\"middle\" font-size=\"8\" fill=\"#FFF\">BOMB</text>\n            </svg>`\n        };\n        \n        const svg = svgs[type] || svgs.flashbang;\n        return `data:image/svg+xml;base64,${btoa(svg)}`;\n    }\n    \n    // Generate all CS2 symbol images\n    async generateAllSymbols() {\n        if (this.isGenerating) return;\n        this.isGenerating = true;\n        \n        const symbols = [\n            { key: 'flashbang', prompt: 'CS2 Counter-Strike flashbang grenade, tactical military equipment, clean icon style, white background' },\n            { key: 'smoke', prompt: 'CS2 Counter-Strike smoke grenade, gray smoke canister, tactical military equipment, clean icon style, white background' },\n            { key: 'grenade', prompt: 'CS2 Counter-Strike HE grenade, explosive device, tactical military equipment, clean icon style, white background' },\n            { key: 'kevlar', prompt: 'CS2 Counter-Strike kevlar vest, blue tactical armor, military protection gear, clean icon style, white background' },\n            { key: 'defuse', prompt: 'CS2 Counter-Strike defuse kit, bomb disposal tool, green electronic device, clean icon style, white background' },\n            { key: 'deagle', prompt: 'CS2 Counter-Strike Desert Eagle pistol, golden handgun, tactical weapon, clean icon style, white background' },\n            { key: 'ak47', prompt: 'CS2 Counter-Strike AK-47 assault rifle, wooden stock automatic weapon, clean icon style, white background' },\n            { key: 'awp', prompt: 'CS2 Counter-Strike AWP sniper rifle, green tactical scope rifle, precision weapon, clean icon style, white background' },\n            { key: 'rush', prompt: 'CS2 Counter-Strike CT badge, golden police star, counter-terrorist emblem, clean icon style, white background' },\n            { key: 'surge', prompt: 'CS2 Counter-Strike rainbow explosion effect, colorful burst pattern, clean icon style, white background' },\n            { key: 'slash', prompt: 'CS2 Counter-Strike karambit knife, curved tactical blade, purple handle knife, clean icon style, white background' },\n            { key: 'scatter', prompt: 'CS2 Counter-Strike bomb, red explosive device with timer, tactical equipment, clean icon style, white background' }\n        ];\n        \n        const results = {};\n        \n        for (const symbol of symbols) {\n            try {\n                console.log(`Generating image for ${symbol.key}...`);\n                const imageUrl = await this.generateImage(symbol.prompt, '256x256');\n                results[symbol.key] = imageUrl;\n                \n                // Small delay to avoid rate limiting\n                await new Promise(resolve => setTimeout(resolve, 1000));\n            } catch (error) {\n                console.error(`Failed to generate ${symbol.key}:`, error);\n                results[symbol.key] = this.getFallbackImage(symbol.key);\n            }\n        }\n        \n        this.isGenerating = false;\n        return results;\n    }\n    \n    // Check if API key is available\n    hasApiKey() {\n        return !!this.getApiKey();\n    }\n    \n    // Clear API key\n    clearApiKey() {\n        this.apiKey = null;\n        localStorage.removeItem('openai_api_key');\n    }\n}